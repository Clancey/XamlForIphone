<#@ template language="C#v3.5" hostspecific="True" #>
<#@ output extension=".g.cs" #>
<#@ assembly name="System.Xml"#>
<#@ import namespace="System" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>

using System.Collections.Generic;
//using System.Windows.Threading;
using System.Windows;
using System;
using System.Drawing; 
using System;
using System.ComponentModel; 
using System.Diagnostics; 
using System.Windows.Markup; 
using XamlForIphone;

namespace XamlForIphone
{

public enum SizeType {Fixed,Calculated};
<#	

string[] uiviews= "UIView,UIActionSheet,UIAlertView,UIControl,UIPickerView,UISegmentedControl,UITableView,UITableViewCell,UITextField,UITextView,UIWindow,UIActivityIndicatorView,UIBezierPath,UIButton,UILabel,UIImageView,UIDatePicker,UINavigationBar,UIPageControl,UIProgressView,UIScrollView,UISearchBar,UISlider,UISwitch,UITabBar,UIToolbar,UIWebView".Split(new char[]{char.Parse(",")});
foreach(var uiview in uiviews)
{
#>
	[ContentProperty("Content")]
	public partial class <#= uiview #> : MonoTouch.UIKit.<#= uiview #> , IDependencyObject
	{		
		public <#= uiview #> () : base ()
		{
		
		}
	
		private static Dictionary<Type,Dictionary<string,DependencyProperty>> propertyDeclarations = new Dictionary<Type,Dictionary<string,DependencyProperty>>();
		private Dictionary<DependencyProperty,object> properties = new Dictionary<DependencyProperty,object>();

		[MonoTODO]
		public bool IsSealed {
			get { return false; }
		}

		public DependencyObjectType DependencyObjectType { 
			get { return DependencyObjectType.FromSystemType (GetType()); }
		}

		public void ClearValue(DependencyProperty dp)
		{
			if (IsSealed)
				throw new InvalidOperationException ("Cannot manipulate property values on a sealed DependencyObject");

			properties[dp] = null;
		}
		
		public void ClearValue(DependencyPropertyKey key)
		{
			ClearValue (key.DependencyProperty);
		}

		public void CoerceValue (DependencyProperty dp)
		{
			PropertyMetadata pm = dp.GetMetadata (this);
			if (pm.CoerceValueCallback != null)
				pm.CoerceValueCallback (this, GetValue (dp));
		}

		public sealed override bool Equals (object obj)
		{
			throw new NotImplementedException("Equals");
		}

		public sealed override int GetHashCode ()
		{
			throw new NotImplementedException("GetHashCode");
		}

		[MonoTODO]
		public LocalValueEnumerator GetLocalValueEnumerator()
		{
			return new LocalValueEnumerator(properties);
		}
		
		public object GetValue(DependencyProperty dp)
		{
			object val = properties[dp];
			return val == null ? dp.DefaultMetadata.DefaultValue : val;
		}
		
		[MonoTODO]
		public void InvalidateProperty(DependencyProperty dp)
		{
			throw new NotImplementedException("InvalidateProperty(DependencyProperty dp)");
		}
		
		public void OnPropertyChanged(DependencyPropertyChangedEventArgs e)
		{
			PropertyMetadata pm = e.Property.GetMetadata (e.Property.OwnerType);
			if (pm.PropertyChangedCallback != null)
				pm.PropertyChangedCallback (this, e);
		}
		
		public object ReadLocalValue(DependencyProperty dp)
		{
			object val = properties[dp];
			return val == null ? DependencyProperty.UnsetValue : val;
		}
		
		public void SetValue(DependencyProperty dp, object value)
		{
			if (IsSealed)
				throw new InvalidOperationException ("Cannot manipulate property values on a sealed DependencyObject");

			if (!dp.IsValidType (value))
				throw new ArgumentException ("value not of the correct type for this DependencyProperty");

			ValidateValueCallback validate = dp.ValidateValueCallback;
			if (validate != null && !validate(value))
				throw new Exception("Value does not validate");
			
			object oldValue = null;
			if(properties.ContainsKey(dp))
				oldValue = 	properties[dp];
			properties[dp] = value;
			//if(oldValue != null)
			OnPropertyChanged(new DependencyPropertyChangedEventArgs(dp,oldValue,value));
		}
		
		public void SetValue(DependencyPropertyKey key, object value)
		{
			SetValue (key.DependencyProperty, value);
		}

		public bool ShouldSerializeProperty (DependencyProperty dp)
		{
			throw new NotImplementedException ();
		}

		internal static void register(Type t, DependencyProperty dp)
		{
			DependencyObject.register(t,dp);
		}
		
#region Content
		/// <summary> 
		/// Gets or sets the content of a ContentControl.
		/// </summary>
		public object Content {
			get { return GetValue (ContentProperty); }
			set { SetValue (ContentProperty, value); }
		}

		/// <summary> 
		/// Identifies the Content dependency property.
		/// </summary>
		public static readonly DependencyProperty ContentProperty = DependencyProperty.Register ("Content", typeof(object), typeof(<#= uiview #>), new PropertyMetadata (OnContentPropertyChanged));

		private static void OnContentPropertyChanged (IDependencyObject d, DependencyPropertyChangedEventArgs e)
		{
			<#= uiview #> source = d as <#= uiview #>;
			Debug.Assert (source != null, "The source is not an instance of <#= uiview #>!");
			
			// Notify derived classes of the change 
			source.OnContentChanged (e.OldValue, e.NewValue);
		}
#endregion Content

		/// <summary>
		/// Called when the Content property changes. 
		/// </summary>
		/// <param name="oldContent">
		/// The old value of the Content property. 
		/// </param>
		/// <param name="newContent">
		/// The new value of the Content property. 
		/// </param> 
		protected virtual void OnContentChanged (object oldContent, object newContent)
		{
			if (this is MonoTouch.UIKit.UIView) {
				if (oldContent is MonoTouch.UIKit.UIView)
					(oldContent as MonoTouch.UIKit.UIView).RemoveFromSuperview ();
				if (newContent is MonoTouch.UIKit.UIView)
					this.AddSubview ((newContent as MonoTouch.UIKit.UIView));
			}
		}
		
		
#region Sizes
		public string Width {
			
			get	{return Frame.Width.ToString();}
			set {
				var width = int.Parse(value);
				var frame = Frame;
				frame.Width = width;
				Frame = frame;			
			}
		}
		
		
		public string Height {
			
			get	{return Frame.Height.ToString();}
			set { 
				var height = int.Parse(value);
				var frame = Frame;
				frame.Height = height;
				Frame = frame;
			}
		}
		
		#endregion Sizes
		
		
		
	}
	
	
<#
}

#>
}


